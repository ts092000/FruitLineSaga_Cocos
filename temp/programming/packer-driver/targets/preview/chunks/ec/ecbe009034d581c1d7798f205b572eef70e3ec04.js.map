{"version":3,"sources":["file:///Users/ADMIN/Desktop/FruitLineSaga_Cocos/FruitLineSaga/FruitLineSaga_Cocos/assets/Script/PrefabControl/LevelBar.ts"],"names":["_decorator","Component","Label","ProgressBar","ccclass","property","LevelBar","valueBar","setCurrentLabel","level","setToValue","value","callBack","percent","newProgress","progressBar","progress","interval","setInterval","clearInterval","setValueBar"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAaC,MAAAA,W,OAAAA,W;;;;;;;;;OACvC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;0BAGjBM,Q,WADZF,OAAO,CAAC,UAAD,C,UAEHC,QAAQ,CAACF,WAAD,C,UAGRE,QAAQ,CAACH,KAAD,C,UAGRG,QAAQ,CAACH,KAAD,C,2BARb,MACaI,QADb,SAC8BL,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAU5BM,QAV4B,GAUT,GAVS;AAAA;;AAY7BC,QAAAA,eAAe,CAACC,KAAD,EAAsB,CAAG;;AAExCC,QAAAA,UAAU,CAACC,KAAD,EAAgBC,QAAhB,EAA0C;AACvD,cAAIC,OAAO,GAAGF,KAAK,GAAG,KAAKJ,QAA3B;AACA,cAAIO,WAAW,GAAG,KAAKC,WAAL,CAAiBC,QAAjB,GAA4BH,OAA9C;AACA,cAAII,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC7B,iBAAKH,WAAL,CAAiBC,QAAjB,IAA6B,KAA7B;;AACA,gBAAI,KAAKD,WAAL,CAAiBC,QAAjB,IAA6BF,WAAjC,EAA8C;AAC1CK,cAAAA,aAAa,CAACF,QAAD,CAAb;AACH;;AAED,gBAAI,KAAKF,WAAL,CAAiBC,QAAjB,IAA6B,CAAjC,EAAoC;AAChCJ,cAAAA,QAAQ;AACRE,cAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACA,mBAAKC,WAAL,CAAiBC,QAAjB,GAA4B,CAA5B;AACH;AACJ,WAXyB,EAWvB,EAXuB,CAA1B;AAYH;;AAEMI,QAAAA,WAAW,CAACT,KAAD,EAAsB;AACpC,eAAKI,WAAL,CAAiBC,QAAjB,GAA4BL,KAA5B;AACH;;AAjCmC,O","sourcesContent":["import { _decorator, Component, Label, Node, ProgressBar } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('LevelBar')\r\nexport class LevelBar extends Component {\r\n    @property(ProgressBar)\r\n    private progressBar: ProgressBar;\r\n\r\n    @property(Label)\r\n    private lbLevePrev: Label;\r\n\r\n    @property(Label)\r\n    private lbLevelNext: Label;\r\n\r\n    private valueBar: number = 250;\r\n\r\n    public setCurrentLabel(level: number): void { }\r\n\r\n    public setToValue(value: number, callBack: Function): void {\r\n        let percent = value / this.valueBar;\r\n        let newProgress = this.progressBar.progress + percent;\r\n        let interval = setInterval(() => {\r\n            this.progressBar.progress += 0.005;\r\n            if (this.progressBar.progress >= newProgress) {\r\n                clearInterval(interval);\r\n            }\r\n\r\n            if (this.progressBar.progress >= 1) {\r\n                callBack();\r\n                newProgress = newProgress - 1;\r\n                this.progressBar.progress = 0;\r\n            }\r\n        }, 10)\r\n    }\r\n\r\n    public setValueBar(value: number): void {\r\n        this.progressBar.progress = value;\r\n    }\r\n}\r\n\r\n"]}