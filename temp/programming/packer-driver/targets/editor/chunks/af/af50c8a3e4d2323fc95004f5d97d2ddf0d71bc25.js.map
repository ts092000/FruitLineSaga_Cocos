{"version":3,"sources":["file:///Users/ADMIN/Desktop/FruitLineSaga_Cocos/FruitLineSaga/FruitLineSaga_Cocos/assets/Script/GameManager/GameView.ts"],"names":["_decorator","Animation","Camera","Component","Label","math","Node","Sprite","SpriteFrame","Vec3","NodeModal","PoolManager","Constants","Cell","CellType","ItemType","AnimationScore","ccclass","property","GameView","type","tooltip","onLoad","renderBoard","nodeModal","footer","active","boardBackground","removeAllChildren","i","BOARD_SIZE","cell","poolManager","getCell","getComponent","setCellType","Empty","addChild","coor","row","Math","floor","col","setCoordinates","generateCells","arrayIndex","cellComponent","randomIndex","randomRangeInt","length","random","undefined","Hint","setTypeFruit","setSpriteFruit","listSpriteFrameFruit","Fruit","randomType","boardFruit","spawnNextCells","listType","Array","push","listNextCells","map","item","index","spriteFrame","removeCells","node","resetCell","putCell","showResult","gameOverBoard","play","getLocationTouch","event","location","cameraGame","screenToWorld","getLocation","x","y","v3","inverseTransformPoint","setLabelItem","value","listNumberItem","string","listNumberItemSide","showLoad","loadNode","hiddenLoad","playAniamtionGift","gift","Boom","spriteGift","sprFrameBoom","lbGift","Hammer","sprFrameHammer","Undo","sprFrameUndo","None","sprDouble","nodeAnimationGift","anim","on","EventType","FINISHED","playExplosion","parent","position","explo","getExplosion","setTimeout","setPosition","putExplosion","playAnimationScore","textCombo","textScore","getAnimationScore","setText","playAnimation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,S,OAAAA,S;AAA4BC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAYC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;;AACzGC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,Q,iBAAAA,Q;AAAkCC,MAAAA,Q,iBAAAA,Q;;AAClCC,MAAAA,c,iBAAAA,c;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBlB,U;;0BAGjBmB,Q,WADZF,OAAO,CAAC,UAAD,C,UAEHC,QAAQ,CAAC;AACNE,QAAAA,IAAI;AAAA;AAAA,kCADE;AAENC,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAAC;AACNE,QAAAA,IAAI;AAAA;AAAA,sCADE;AAENC,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEZ,WADA;AAENa,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAElB;AADA,OAAD,C,UAKRgB,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEhB,KADA;AAENiB,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEhB,KADA;AAENiB,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAAC;AACNE,QAAAA,IAAI,EAAEd,IADA;AAENe,QAAAA,OAAO,EAAE;AAFH,OAAD,C,UAMRH,QAAQ,CAACZ,IAAD,C,WAGRY,QAAQ,CAACX,MAAD,C,WAGRW,QAAQ,CAACd,KAAD,C,2BAjDb,MACae,QADb,SAC8BhB,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAmD1BmB,QAAAA,MAAM,GAAS;AACrB,eAAKC,WAAL,GADqB,CAErB;;AACA,eAAKC,SAAL,CAAeC,MAAf,CAAsBC,MAAtB,GAA+B,IAA/B;AACH;;AAEMH,QAAAA,WAAW,GAAS;AACvB,eAAKC,SAAL,CAAeG,eAAf,CAA+BC,iBAA/B;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG;AAAA;AAAA,sCAAUC,UAAV,GAAuB;AAAA;AAAA,sCAAUA,UAArD,EAAiED,CAAC,EAAlE,EAAsE;AAClE,gBAAIE,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAAjB,EAAX;AACAF,YAAAA,IAAI,CAACG,YAAL;AAAA;AAAA,8BAAwBC,WAAxB,CAAoC;AAAA;AAAA,sCAASC,KAA7C;AACA,iBAAKZ,SAAL,CAAeG,eAAf,CAA+BU,QAA/B,CAAwCN,IAAxC;AAEA,gBAAIO,IAAiB,GAAG;AAAEC,cAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWZ,CAAC,GAAG;AAAA;AAAA,0CAAUC,UAAzB,CAAP;AAA6CY,cAAAA,GAAG,EAAEb,CAAC,GAAG;AAAA;AAAA,0CAAUC;AAAhE,aAAxB;AACAC,YAAAA,IAAI,CAACG,YAAL;AAAA;AAAA,8BAAwBS,cAAxB,CAAuCL,IAAvC;AACH;AACJ;;AAEMM,QAAAA,aAAa,CAACC,UAAD,EAA4BzB,IAA5B,EAAoD;AACpE,cAAIW,IAAI,GAAG,KAAKC,WAAL,CAAiBC,OAAjB,EAAX;AACA,cAAIa,aAAa,GAAGf,IAAI,CAACG,YAAL;AAAA;AAAA,2BAApB;AAEA,cAAIa,WAAW,GAAG1C,IAAI,CAAC2C,cAAL,CAAoB,CAApB,EAAuBH,UAAU,CAACI,MAAlC,CAAlB;AACA,cAAIC,MAAM,GAAGL,UAAU,CAACE,WAAD,CAAvB;AAEA,cAAIT,IAAiB,GAAG;AAAEC,YAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWS,MAAM,GAAG;AAAA;AAAA,wCAAUpB,UAA9B,CAAP;AAAkDY,YAAAA,GAAG,EAAEQ,MAAM,GAAG;AAAA;AAAA,wCAAUpB;AAA1E,WAAxB;AACAgB,UAAAA,aAAa,CAACH,cAAd,CAA6BL,IAA7B;;AAEA,cAAIlB,IAAI,KAAK+B,SAAb,EAAwB;AACpBL,YAAAA,aAAa,CAACX,WAAd,CAA0B;AAAA;AAAA,sCAASiB,IAAnC;AACAN,YAAAA,aAAa,CAACO,YAAd,CAA2BjC,IAA3B;AACA0B,YAAAA,aAAa,CAACQ,cAAd,CAA6B,KAAKC,oBAAL,CAA0BnC,IAA1B,CAA7B;AACH,WAJD,MAIO;AACH0B,YAAAA,aAAa,CAACX,WAAd,CAA0B;AAAA;AAAA,sCAASqB,KAAnC;AACA,gBAAIC,UAAU,GAAGpD,IAAI,CAAC2C,cAAL,CAAoB,CAApB,EAAuB,KAAKO,oBAAL,CAA0BN,MAAjD,CAAjB;AACAH,YAAAA,aAAa,CAACO,YAAd,CAA2BI,UAA3B;AACAX,YAAAA,aAAa,CAACQ,cAAd,CAA6B,KAAKC,oBAAL,CAA0BE,UAA1B,CAA7B;AACH;;AAED,eAAKjC,SAAL,CAAekC,UAAf,CAA0BrB,QAA1B,CAAmCN,IAAnC;AACA,iBAAOA,IAAP;AACH;;AAEM4B,QAAAA,cAAc,GAAkB;AACnC,cAAIC,QAAuB,GAAG,IAAIC,KAAJ,EAA9B;;AACA,iBAAOD,QAAQ,CAACX,MAAT,GAAkB,CAAzB,EAA4B;AACxB,gBAAIQ,UAAU,GAAGpD,IAAI,CAAC2C,cAAL,CAAoB,CAApB,EAAuB,KAAKO,oBAAL,CAA0BN,MAAjD,CAAjB;AACAW,YAAAA,QAAQ,CAACE,IAAT,CAAcL,UAAd;AACH;;AACD,eAAKjC,SAAL,CAAeuC,aAAf,CAA6BC,GAA7B,CAAiC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9CD,YAAAA,IAAI,CAAC/B,YAAL,CAAkB3B,MAAlB,EAA0B4D,WAA1B,GAAwC,KAAKZ,oBAAL,CAA0BK,QAAQ,CAACM,KAAD,CAAlC,CAAxC;AACH,WAFD;AAIA,iBAAON,QAAP;AACH;;AAEMQ,QAAAA,WAAW,CAACC,IAAD,EAAmB;AACjC;AACAA,UAAAA,IAAI,CAACnC,YAAL;AAAA;AAAA,4BAAwBoC,SAAxB;AACA,eAAKtC,WAAL,CAAiBuC,OAAjB,CAAyBF,IAAzB;AACH;;AAEMG,QAAAA,UAAU,GAAS;AACtB,eAAKhD,SAAL,CAAeiD,aAAf,CAA6B/C,MAA7B,GAAsC,IAAtC;AACA,eAAKF,SAAL,CAAeiD,aAAf,CAA6BvC,YAA7B,CAA0CjC,SAA1C,EAAqDyE,IAArD;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWC,QAAAA,gBAAgB,CAACC,KAAD,EAAoBP,IAApB,EAAsC;AACzD,cAAIQ,QAAQ,GAAG,KAAKC,UAAL,CAAgBC,aAAhB,CAA8B,IAAItE,IAAJ,CAASmE,KAAK,CAACI,WAAN,GAAoBC,CAA7B,EAAgCL,KAAK,CAACI,WAAN,GAAoBE,CAApD,EAAuD,CAAvD,CAA9B,CAAf;AACA,cAAIC,EAAQ,GAAG,IAAI1E,IAAJ,EAAf;AACA4D,UAAAA,IAAI,CAACe,qBAAL,CAA2BD,EAA3B,EAA+B,IAAI1E,IAAJ,CAASoE,QAAQ,CAACI,CAAlB,EAAqBJ,QAAQ,CAACK,CAA9B,CAA/B;AACA,iBAAOC,EAAP;AACH;;AAEME,QAAAA,YAAY,CAACC,KAAD,EAAgBpB,KAAhB,EAAqC;AACpD,eAAKqB,cAAL,CAAoBrB,KAApB,MAA+B,KAAKqB,cAAL,CAAoBrB,KAApB,EAA2BsB,MAA3B,GAAqC,GAAEF,KAAM,EAA5E;AACA,eAAKG,kBAAL,CAAwBvB,KAAxB,MAAmC,KAAKuB,kBAAL,CAAwBvB,KAAxB,EAA+BsB,MAA/B,GAAyC,GAAEF,KAAM,EAApF;AACH;;AAEMI,QAAAA,QAAQ,GAAS;AACpB,eAAKC,QAAL,CAAcjE,MAAd,GAAuB,IAAvB;AACH;;AAEMkE,QAAAA,UAAU,GAAS;AACtB,eAAKD,QAAL,CAAcjE,MAAd,GAAuB,KAAvB;AACH;;AAEMmE,QAAAA,iBAAiB,CAACC,IAAD,EAAuB;AAC3C,kBAAQA,IAAR;AACI,iBAAK;AAAA;AAAA,sCAASC,IAAd;AACI,mBAAKC,UAAL,CAAgB7B,WAAhB,GAA8B,KAAK3C,SAAL,CAAeyE,YAA7C;AACA,mBAAKC,MAAL,CAAYV,MAAZ,GAAqB,KAArB;AACA;;AACJ,iBAAK;AAAA;AAAA,sCAASW,MAAd;AACI,mBAAKH,UAAL,CAAgB7B,WAAhB,GAA8B,KAAK3C,SAAL,CAAe4E,cAA7C;AACA,mBAAKF,MAAL,CAAYV,MAAZ,GAAqB,KAArB;AACA;;AACJ,iBAAK;AAAA;AAAA,sCAASa,IAAd;AACI,mBAAKL,UAAL,CAAgB7B,WAAhB,GAA8B,KAAK3C,SAAL,CAAe8E,YAA7C;AACA,mBAAKJ,MAAL,CAAYV,MAAZ,GAAqB,KAArB;AACA;;AACJ,iBAAK;AAAA;AAAA,sCAASe,IAAd;AACI,mBAAKP,UAAL,CAAgB7B,WAAhB,GAA8B,KAAK3C,SAAL,CAAegF,SAA7C;AACA,mBAAKN,MAAL,CAAYV,MAAZ,GAAqB,EAArB;AACA;AAhBR;;AAiBC;AACD,eAAKiB,iBAAL,CAAuB/E,MAAvB,GAAgC,IAAhC;AACA,cAAIgF,IAAI,GAAG,KAAKD,iBAAL,CAAuBvE,YAAvB,CAAoCjC,SAApC,CAAX;AACAyG,UAAAA,IAAI,CAACC,EAAL,CAAQ1G,SAAS,CAAC2G,SAAV,CAAoBC,QAA5B,EAAsC,MAAMH,IAAI,CAACrC,IAAL,CAAU3C,MAAV,GAAmB,KAA/D;AACAgF,UAAAA,IAAI,CAAChC,IAAL;AACH;;AAEMoC,QAAAA,aAAa,CAACC,MAAD,EAAeC,QAAf,EAAqC;AACrD,cAAIC,KAAK,GAAG,KAAKjF,WAAL,CAAiBkF,YAAjB,EAAZ;AAEAC,UAAAA,UAAU,CAAC,MAAM;AACbF,YAAAA,KAAK,CAACG,WAAN,CAAkBJ,QAAlB;AACAD,YAAAA,MAAM,CAAC1E,QAAP,CAAgB4E,KAAhB;AAEA,gBAAIP,IAAI,GAAGO,KAAK,CAAC/E,YAAN,CAAmBjC,SAAnB,CAAX;AACAyG,YAAAA,IAAI,CAACC,EAAL,CAAQ1G,SAAS,CAAC2G,SAAV,CAAoBC,QAA5B,EAAsC,MAAM,KAAK7E,WAAL,CAAiBqF,YAAjB,CAA8BX,IAAI,CAACrC,IAAnC,CAA5C;AACAqC,YAAAA,IAAI,CAAChC,IAAL;AACH,WAPS,EAOP,GAPO,CAAV;AAQH;;AAEM4C,QAAAA,kBAAkB,CAACC,SAAD,EAAoBC,SAApB,EAA6C;AAClE,cAAId,IAAI,GAAG,KAAK1E,WAAL,CAAiByF,iBAAjB,EAAX;AACAf,UAAAA,IAAI,CAACxE,YAAL;AAAA;AAAA,gDAAkCwF,OAAlC,CAA0CF,SAA1C,EAAqDD,SAArD;AACAb,UAAAA,IAAI,CAACK,MAAL,GAAc,KAAKvF,SAAL,CAAekC,UAAf,CAA0BqD,MAA1B,CAAiCA,MAA/C;AACAL,UAAAA,IAAI,CAACxE,YAAL;AAAA;AAAA,gDAAkCyF,aAAlC;AACH;;AA3LmC,O;;;;;;;;;;;;;;;iBAiBU,E;;;;;;;;;;;;iBAWZ,E;;;;;;;iBAMI,E","sourcesContent":["import { _decorator, Animation, Camera, Component, sys, EventTouch, Label, math, Node, Pool, Sprite, SpriteFrame, Vec3 } from 'cc';\r\nimport { NodeModal } from '../NodeModal';\r\nimport { PoolManager } from '../PoolManager';\r\nimport { Constants } from '../Utils/Constants';\r\nimport { Cell } from '../PrefabControl/Cell';\r\nimport { CellType, Coordinates, FruitType, ItemType } from '../Utils/DataTypes';\r\nimport { AnimationScore } from '../PrefabControl/AnimationScore';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameView')\r\nexport class GameView extends Component {\r\n    @property({\r\n        type: NodeModal,\r\n        tooltip: 'Node modal'\r\n    })\r\n    private nodeModal: NodeModal;\r\n\r\n    @property({\r\n        type: PoolManager,\r\n        tooltip: 'Pool manager'\r\n    })\r\n    private poolManager: PoolManager;\r\n\r\n    @property({\r\n        type: SpriteFrame,\r\n        tooltip: 'List fruit'\r\n    })\r\n    private listSpriteFrameFruit: SpriteFrame[] = [];\r\n\r\n    @property({\r\n        type: Camera\r\n    })\r\n    private cameraGame: Camera;\r\n\r\n    @property({\r\n        type: Label,\r\n        tooltip: 'Label number item'\r\n    })\r\n    private listNumberItem: Label[] = [];\r\n\r\n    @property({\r\n        type: Label,\r\n        tooltip: 'Label number item side'\r\n    })\r\n    private listNumberItemSide: Label[] = [];\r\n\r\n    @property({\r\n        type: Node,\r\n        tooltip: 'Node load'\r\n    })\r\n    private loadNode: Node;\r\n\r\n    @property(Node)\r\n    private nodeAnimationGift: Node;\r\n\r\n    @property(Sprite)\r\n    private spriteGift: Sprite;\r\n\r\n    @property(Label)\r\n    private lbGift: Label;\r\n\r\n    protected onLoad(): void {\r\n        this.renderBoard();\r\n        // this.nodeModal.sideBar.active = sys.isMobile;\r\n        this.nodeModal.footer.active = true;\r\n    }\r\n\r\n    public renderBoard(): void {\r\n        this.nodeModal.boardBackground.removeAllChildren();\r\n\r\n        for (let i = 0; i < Constants.BOARD_SIZE * Constants.BOARD_SIZE; i++) {\r\n            let cell = this.poolManager.getCell();\r\n            cell.getComponent(Cell).setCellType(CellType.Empty);\r\n            this.nodeModal.boardBackground.addChild(cell);\r\n\r\n            let coor: Coordinates = { row: Math.floor(i / Constants.BOARD_SIZE), col: i % Constants.BOARD_SIZE };\r\n            cell.getComponent(Cell).setCoordinates(coor);\r\n        }\r\n    }\r\n\r\n    public generateCells(arrayIndex: Array<number>, type?: FruitType): Node {\r\n        let cell = this.poolManager.getCell();\r\n        let cellComponent = cell.getComponent(Cell);\r\n\r\n        let randomIndex = math.randomRangeInt(0, arrayIndex.length);\r\n        let random = arrayIndex[randomIndex];\r\n\r\n        let coor: Coordinates = { row: Math.floor(random / Constants.BOARD_SIZE), col: random % Constants.BOARD_SIZE };\r\n        cellComponent.setCoordinates(coor);\r\n        \r\n        if (type !== undefined) {\r\n            cellComponent.setCellType(CellType.Hint);\r\n            cellComponent.setTypeFruit(type);\r\n            cellComponent.setSpriteFruit(this.listSpriteFrameFruit[type]);\r\n        } else {\r\n            cellComponent.setCellType(CellType.Fruit);\r\n            let randomType = math.randomRangeInt(0, this.listSpriteFrameFruit.length);\r\n            cellComponent.setTypeFruit(randomType);\r\n            cellComponent.setSpriteFruit(this.listSpriteFrameFruit[randomType]);\r\n        }\r\n\r\n        this.nodeModal.boardFruit.addChild(cell);\r\n        return cell;\r\n    }\r\n\r\n    public spawnNextCells(): Array<number> {\r\n        let listType: Array<number> = new Array();\r\n        while (listType.length < 3) {\r\n            let randomType = math.randomRangeInt(0, this.listSpriteFrameFruit.length);\r\n            listType.push(randomType);\r\n        }\r\n        this.nodeModal.listNextCells.map((item, index) => {\r\n            item.getComponent(Sprite).spriteFrame = this.listSpriteFrameFruit[listType[index]];\r\n        })\r\n\r\n        return listType;\r\n    }\r\n\r\n    public removeCells(node: Node): void {\r\n        //Reset cell\r\n        node.getComponent(Cell).resetCell();\r\n        this.poolManager.putCell(node);\r\n    }\r\n\r\n    public showResult(): void {\r\n        this.nodeModal.gameOverBoard.active = true;\r\n        this.nodeModal.gameOverBoard.getComponent(Animation).play();\r\n    }\r\n\r\n    /**\r\n    * @param event Event touch\r\n    * @param node Node to inverse\r\n    * @returns Local position of point in container node\r\n    */\r\n    public getLocationTouch(event: EventTouch, node: Node): Vec3 {\r\n        let location = this.cameraGame.screenToWorld(new Vec3(event.getLocation().x, event.getLocation().y, 0));\r\n        let v3: Vec3 = new Vec3();\r\n        node.inverseTransformPoint(v3, new Vec3(location.x, location.y));\r\n        return v3;\r\n    }\r\n\r\n    public setLabelItem(value: number, index: number): void {\r\n        this.listNumberItem[index] && (this.listNumberItem[index].string = `${value}`);\r\n        this.listNumberItemSide[index] && (this.listNumberItemSide[index].string = `${value}`);\r\n    }\r\n\r\n    public showLoad(): void {\r\n        this.loadNode.active = true;\r\n    }\r\n\r\n    public hiddenLoad(): void {\r\n        this.loadNode.active = false;\r\n    }\r\n\r\n    public playAniamtionGift(gift: ItemType): void {\r\n        switch (gift) {\r\n            case ItemType.Boom:\r\n                this.spriteGift.spriteFrame = this.nodeModal.sprFrameBoom;\r\n                this.lbGift.string = '+ 1';\r\n                break;\r\n            case ItemType.Hammer:\r\n                this.spriteGift.spriteFrame = this.nodeModal.sprFrameHammer;\r\n                this.lbGift.string = '+ 1';\r\n                break;\r\n            case ItemType.Undo:\r\n                this.spriteGift.spriteFrame = this.nodeModal.sprFrameUndo;\r\n                this.lbGift.string = '+ 1';\r\n                break;\r\n            case ItemType.None:\r\n                this.spriteGift.spriteFrame = this.nodeModal.sprDouble;\r\n                this.lbGift.string = '';\r\n                break;\r\n        };\r\n        this.nodeAnimationGift.active = true;\r\n        let anim = this.nodeAnimationGift.getComponent(Animation);\r\n        anim.on(Animation.EventType.FINISHED, () => anim.node.active = false);\r\n        anim.play();\r\n    }\r\n\r\n    public playExplosion(parent: Node, position: Vec3): void {\r\n        let explo = this.poolManager.getExplosion();\r\n\r\n        setTimeout(() => {\r\n            explo.setPosition(position);\r\n            parent.addChild(explo);\r\n\r\n            let anim = explo.getComponent(Animation);\r\n            anim.on(Animation.EventType.FINISHED, () => this.poolManager.putExplosion(anim.node));\r\n            anim.play();\r\n        }, 500);\r\n    }\r\n\r\n    public playAnimationScore(textCombo: string, textScore: string): void {\r\n        let anim = this.poolManager.getAnimationScore();\r\n        anim.getComponent(AnimationScore).setText(textScore, textCombo);\r\n        anim.parent = this.nodeModal.boardFruit.parent.parent;\r\n        anim.getComponent(AnimationScore).playAnimation();\r\n    }\r\n}\r\n\r\n"]}