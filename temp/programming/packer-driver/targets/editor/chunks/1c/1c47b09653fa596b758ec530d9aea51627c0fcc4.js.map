{"version":3,"sources":["file:///Users/ADMIN/Desktop/fruit-lines-saga/assets/Script/GameManager/MatrixManager.ts"],"names":["_decorator","Component","Vec2","Constants","ccclass","property","MatrixManager","dataMatrix","Array","arrayIndex","count","onLoad","initData","length","BOARD_SIZE","row","fill","push","i","fillCell","index","type","coor","Math","floor","col","isNaN","fillIndex","filter","item","emptyCell","isHasInArray","getPath","start","end","path","prev","initDefaultArray","getBestPath","temp","unshift","queue","delta","visited","shift","newCoor","x","y","number","value","getListDelete","listDelete","tempList","j","isElementOfArray","list","findIndex","array","element"],"mappings":"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","sourcesContent":["import { Coordinates } from './../Utils/DataTypes';\r\nimport { _decorator, Component, Contact2DType, Node, Vec2 } from 'cc';\r\nimport { Constants } from '../Utils/Constants';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MatrixManager')\r\nexport class MatrixManager extends Component {\r\n    public dataMatrix: Array<Array<number>> = new Array();\r\n    public arrayIndex: Array<number> = new Array();\r\n    public count: number = 0;\r\n\r\n    protected onLoad(): void {\r\n        this.initData();\r\n    }\r\n\r\n    private initData(): void {\r\n        while (this.dataMatrix.length < Constants.BOARD_SIZE) {\r\n            let row: Array<number> = new Array(Constants.BOARD_SIZE);\r\n            row.fill(-1, 0, row.length);\r\n            this.dataMatrix.push(row);\r\n        }\r\n\r\n        for (let i = 0; i < Constants.BOARD_SIZE * Constants.BOARD_SIZE; i++)\r\n            this.arrayIndex.push(i);\r\n    }\r\n\r\n    public fillCell(index: number, type: number): void {\r\n        let coor: Coordinates = {\r\n            row: Math.floor(index / Constants.BOARD_SIZE),\r\n            col: index % Constants.BOARD_SIZE\r\n        };\r\n        if (isNaN(coor.row) || isNaN(coor.col)) return;\r\n        this.dataMatrix[coor.row][coor.col] = type;\r\n    }\r\n\r\n    public fillIndex(index: number): void {\r\n        this.arrayIndex = this.arrayIndex.filter((item) => item !== index)\r\n    }\r\n\r\n    public emptyCell(index: number): void {\r\n        let coor: Coordinates = {\r\n            row: Math.floor(index / Constants.BOARD_SIZE),\r\n            col: index % Constants.BOARD_SIZE\r\n        };\r\n        this.dataMatrix[coor.row][coor.col] = -1;\r\n        if (!this.isHasInArray(this.arrayIndex, index)) this.arrayIndex.push(index);\r\n    }\r\n    /**\r\n     * Get path move \r\n     * @param start Start coor\r\n     * @param end End coor\r\n     * @returns Path of move\r\n     */\r\n    public getPath(start: Coordinates, end: Coordinates): Array<Coordinates> {\r\n        let path: Array<Coordinates> = new Array();\r\n        let prev: Array<Array<Coordinates>> = new Array();\r\n\r\n        while (prev.length < Constants.BOARD_SIZE)\r\n            prev.push(this.initDefaultArray(Constants.BOARD_SIZE, { row: -1, col: -1 }));\r\n\r\n        if (this.getBestPath(prev, start, end)) {\r\n            let temp = prev[end.row][end.col];\r\n            while (temp.row != start.row || temp.col != start.col) {\r\n                path.push(temp);\r\n                temp = prev[temp.row][temp.col];\r\n            }\r\n            path.push(start);\r\n        }\r\n        path.unshift(end);\r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Find path by BFS\r\n     * @param prev The previous array\r\n     * @param start Start coor\r\n     * @param end End coor\r\n     * @returns True if path is exists\r\n     */\r\n    private getBestPath(prev: Array<Array<Coordinates>>, start: Coordinates, end: Coordinates): boolean {\r\n        let queue: Array<Coordinates> = new Array();\r\n        let delta: Array<Vec2> = [new Vec2(-1, 0), new Vec2(1, 0), new Vec2(0, -1), new Vec2(0, 1)];\r\n\r\n        let visited: Array<Array<boolean>> = new Array();\r\n        while (visited.length < Constants.BOARD_SIZE)\r\n            visited.push(this.initDefaultArray(Constants.BOARD_SIZE, false));\r\n\r\n        queue.push(start);\r\n        visited[start.row][start.col] = true;\r\n\r\n        while (queue.length > 0) {\r\n            let coor = queue.shift();\r\n            if (coor.row === end.row && coor.col === end.col) return true;\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                let newCoor: Coordinates = { row: 0, col: 0 };\r\n                newCoor.row = coor.row + delta[i].x;\r\n                newCoor.col = coor.col + delta[i].y;\r\n\r\n                if (newCoor.row >= Constants.BOARD_SIZE || newCoor.row < 0) continue;\r\n                if (newCoor.col >= Constants.BOARD_SIZE || newCoor.col < 0) continue;\r\n                if (this.dataMatrix[newCoor.row][newCoor.col] !== -1\r\n                    && !(newCoor.row === end.row && newCoor.col === end.col)) continue;\r\n\r\n                if (!visited[newCoor.row][newCoor.col]) {\r\n                    queue.push(newCoor);\r\n                    visited[newCoor.row][newCoor.col] = true;\r\n                    prev[newCoor.row][newCoor.col] = coor;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Init default value of array by type\r\n     * @param number Length of array\r\n     * @param value Default value\r\n     * @returns \r\n     */\r\n    private initDefaultArray<Type>(number, value: Type): Array<Type> {\r\n        let row: Array<Type> = new Array(number);\r\n        row.fill(value, 0, row.length);\r\n        return row;\r\n    }\r\n\r\n    public getListDelete(coor: Coordinates, type: number): Array<Coordinates> {\r\n        let listDelete: Array<Coordinates> = new Array();\r\n        let tempList: Array<Coordinates> = new Array();\r\n\r\n        //Check Vertical\r\n        let i = coor.row;\r\n        while (i >= 0 && this.dataMatrix[i][coor.col] === type) {\r\n            let newCoor: Coordinates = { row: i, col: coor.col }\r\n            tempList.push(newCoor);\r\n            i--;\r\n        }\r\n\r\n        i = coor.row + 1;\r\n        while (i < Constants.BOARD_SIZE && this.dataMatrix[i][coor.col] === type) {\r\n            tempList.push({ row: i, col: coor.col });\r\n            i++;\r\n        }\r\n        if (tempList.length >= 5) {\r\n            listDelete.push(...tempList);\r\n            this.count++;\r\n        }\r\n\r\n        tempList = [];\r\n\r\n        //Check Horizontal\r\n        let j = coor.col;\r\n        while (j >= 0 && this.dataMatrix[coor.row][j] === type) {\r\n            tempList.push({ row: coor.row, col: j });\r\n            j--;\r\n        }\r\n\r\n        j = coor.col + 1;\r\n        while (j < Constants.BOARD_SIZE && this.dataMatrix[coor.row][j] === type) {\r\n            tempList.push({ row: coor.row, col: j });\r\n            j++;\r\n        }\r\n        if (tempList.length >= 5) {\r\n            listDelete.push(...tempList);\r\n            this.count++;\r\n        }\r\n        tempList = [];\r\n\r\n        //Check left cross\r\n        i = coor.row; j = coor.col;\r\n        while (j >= 0 && i >= 0 && this.dataMatrix[i][j] === type) {\r\n            tempList.push({ row: i, col: j });\r\n            i--;\r\n            j--;\r\n        }\r\n\r\n        i = coor.row + 1; j = coor.col + 1;\r\n        while (j < Constants.BOARD_SIZE && i < Constants.BOARD_SIZE && this.dataMatrix[i][j] === type) {\r\n            tempList.push({ row: i, col: j });\r\n            i++;\r\n            j++;\r\n        }\r\n        if (tempList.length >= 5) {\r\n            listDelete.push(...tempList);\r\n            this.count++;\r\n        }\r\n        tempList = [];\r\n\r\n        //Check right cross\r\n        i = coor.row; j = coor.col;\r\n        while (i >= 0 && j < Constants.BOARD_SIZE && this.dataMatrix[i][j] === type) {\r\n            tempList.push({ row: i, col: j });\r\n            i--;\r\n            j++;\r\n        }\r\n\r\n        i = coor.row + 1; j = coor.col - 1;\r\n        while (i < Constants.BOARD_SIZE && j >= 0 && this.dataMatrix[i][j] === type) {\r\n            tempList.push({ row: i, col: j });\r\n            i++;\r\n            j--;\r\n        }\r\n        if (tempList.length >= 5) {\r\n            listDelete.push(...tempList);\r\n            this.count++;\r\n        }\r\n        tempList = [];\r\n\r\n        return listDelete;\r\n    }\r\n\r\n    public isElementOfArray(coor: Coordinates, list: Array<Coordinates>): boolean {\r\n        let index = list.findIndex((item) => item.row === coor.row && item.col === coor.col);\r\n        return index !== -1;\r\n    }\r\n\r\n    private isHasInArray(array: Array<number>, element: number): boolean {\r\n        let index = array.findIndex((item) => item === element);\r\n        return index > -1;\r\n    }\r\n}\r\n\r\n"]}