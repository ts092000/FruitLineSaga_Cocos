{"version":3,"sources":["file:///Users/ADMIN/Desktop/fruit-lines-saga/assets/Script/GameCenter/GameCenterController.ts"],"names":["_decorator","Component","director","find","Node","Constants","DataGame","StoreAPI","GameClient","ccclass","property","GameCenterController","gameIDDev","apiKeyDev","gameClient","user","initGameClient","callBack","parameters","NODE_NAME","window","parent","dev","initAsync","then","userID","citizen","getCitizenId","userName","account","getUsername","name","getCitizenName","data","getGameData","response","undefined","dataGame","catch","e","console","log","gameClientParams","addComponent","userData","addPersistRootNode","apply","startMatch","getComponent","match","matchData","checkLog","matchId","error","completeMatch","setGameData","logGame","push","logMatch","getLeaderBoard","type","leaderBoard","getList"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, find, game, Node } from 'cc';\r\nimport { Constants } from '../Utils/Constants';\r\nimport { DataGame } from '../Utils/DataGame';\r\nimport { StoreAPI } from './StoreAPI';\r\nimport GameClient from '@onechaintech/gamesdk';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport type LeaderBoard = {\r\n    index: number;\r\n    metadata: {\r\n        avatarUrl: string,\r\n        citizenCode: string,\r\n        citizenName: string,\r\n        username: string\r\n    },\r\n    point: number,\r\n    userId: string\r\n}\r\n\r\n@ccclass('GameCenterController')\r\nexport class GameCenterController extends Component {\r\n    private readonly gameIDDev: string = '650c283bd6ba6276fea9b9f8';\r\n    private readonly apiKeyDev: string = '3c820aff-ecdf-4ee4-a282-4537350df1a5';\r\n    public gameClient;\r\n    public user;\r\n\r\n\r\n    public initGameClient(callBack: () => void): void {\r\n        let parameters = new Node(Constants.NODE_NAME.GameClient);\r\n\r\n        this.gameClient = new GameClient(this.gameIDDev, this.apiKeyDev, window.parent, { dev: true });\r\n        this.gameClient.initAsync().then(async () => {\r\n            //Get current user id\r\n            let userID = this.gameClient.user.citizen.getCitizenId();\r\n            this.user = {\r\n                userID: this.gameClient.user.citizen.getCitizenId(),\r\n                userName: this.gameClient.user.account.getUsername(),\r\n                name: this.gameClient.user.citizen.getCitizenName()\r\n            }\r\n\r\n            //Get gamedata from server\r\n            await this.gameClient.user.data.getGameData().then((response) => {\r\n                //Save data\r\n                if (response.data[`${userID}`] !== undefined) DataGame.dataGame = response.data[`${userID}`];\r\n                //console.log(DataGame.dataGame);\r\n\r\n            }).catch((e) => {\r\n                console.log('Error at get game data: ', e);\r\n            })\r\n\r\n            let gameClientParams = parameters.addComponent(StoreAPI);\r\n            gameClientParams.gameClient = this.gameClient;\r\n            gameClientParams.userData = this.user;\r\n            director.addPersistRootNode(parameters);\r\n\r\n            //Run callback\r\n            callBack.apply(callBack);\r\n        }).catch((e) => {\r\n            console.log('Error at init game client: ', e);\r\n        })\r\n    }\r\n\r\n    public startMatch(callBack: () => void): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n\r\n        this.gameClient.match.startMatch().then((data) => {\r\n            gameClientParams.matchData = data;\r\n\r\n            //Create array log\r\n            if (!DataGame.dataGame.checkLog) DataGame.dataGame.checkLog = {};\r\n            DataGame.dataGame.checkLog[data.matchId] = [];\r\n\r\n\r\n            // Apply callback\r\n            callBack.apply(callBack);\r\n        }).catch((error) => console.log('Error at start match: ', error));\r\n    }\r\n\r\n    /** \r\n     * @param callBack Call when api done\r\n     * @param data Data leader board\r\n     */\r\n    public completeMatch(callBack: () => void, data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n\r\n        this.gameClient.match.completeMatch(gameClientParams.matchData, data)\r\n            .then(() => {\r\n                let userID = this.gameClient.user.citizen.getCitizenId();\r\n                this.gameClient.user.data.setGameData({ [userID]: DataGame.dataGame }, false).then(() => { })\r\n                    .catch((e) => { console.log(\"Error at set game data\", e); })\r\n\r\n                //Apply callback\r\n                callBack.apply(callBack);\r\n            }).catch((e) => {\r\n                console.log(e);\r\n            })\r\n    }\r\n\r\n    public setGameData(logGame: { score: number, seconds: number, datetime: string }): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n\r\n        this.gameClient = gameClientParams.gameClient;\r\n        let matchId = gameClientParams.matchData.matchId\r\n\r\n        DataGame.dataGame.checkLog[`${matchId}`].push(logGame);\r\n    }\r\n\r\n    public logMatch(data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.gameClient.logMatch(gameClientParams.matchData.matchId, data).catch((e) => console.log(e));\r\n    }\r\n\r\n    public async getLeaderBoard(type: number): Promise<LeaderBoard[]> {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.user = gameClientParams.userData;\r\n\r\n        let data: LeaderBoard[] = await this.gameClient.leaderBoard.getList(type).catch((e) => {\r\n            return [];\r\n        });\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n"]}