{"version":3,"sources":["file:///Users/ADMIN/Desktop/fruit-lines-saga/assets/Script/GameCenter/GameCenterController.ts"],"names":["_decorator","Component","find","Constants","DataGame","StoreAPI","ccclass","property","GameCenterController","gameIDDev","apiKeyDev","gameClient","user","initGameClient","callBack","startMatch","parameters","NODE_NAME","GameClient","gameClientParams","getComponent","match","then","data","matchData","dataGame","checkLog","matchId","apply","catch","error","console","log","completeMatch","userID","citizen","getCitizenId","setGameData","e","logGame","push","logMatch","getLeaderBoard","type","userData","leaderBoard","getList"],"mappings":"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","sourcesContent":["import { _decorator, Component, director, find, game, Node } from 'cc';\r\nimport { Constants } from '../Utils/Constants';\r\nimport { DataGame } from '../Utils/DataGame';\r\nimport { StoreAPI } from './StoreAPI';\r\n// import GameClient from '@onechaintech/gamesdk';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport type LeaderBoard = {\r\n    index: number;\r\n    metadata: {\r\n        avatarUrl: string,\r\n        citizenCode: string,\r\n        citizenName: string,\r\n        username: string\r\n    },\r\n    point: number,\r\n    userId: string\r\n}\r\n\r\n@ccclass('GameCenterController')\r\nexport class GameCenterController extends Component {\r\n    private readonly gameIDDev: string = '650c283bd6ba6276fea9b9f8';\r\n    private readonly apiKeyDev: string = '3c820aff-ecdf-4ee4-a282-4537350df1a5';\r\n    public gameClient;\r\n    public user;\r\n\r\n\r\n    public initGameClient(callBack: () => void): void {\r\n        // let parameters = new Node(Constants.NODE_NAME.GameClient);\r\n\r\n        // this.gameClient = new GameClient(this.gameIDDev, this.apiKeyDev, window.parent, { dev: true });\r\n        // this.gameClient.initAsync().then(async () => {\r\n        //     //Get current user id\r\n        //     let userID = this.gameClient.user.citizen.getCitizenId();\r\n        //     this.user = {\r\n        //         userID: this.gameClient.user.citizen.getCitizenId(),\r\n        //         userName: this.gameClient.user.account.getUsername(),\r\n        //         name: this.gameClient.user.citizen.getCitizenName()\r\n        //     }\r\n\r\n        //     //Get gamedata from server\r\n        //     await this.gameClient.user.data.getGameData().then((response) => {\r\n        //         //Save data\r\n        //         if (response.data[`${userID}`] !== undefined) DataGame.dataGame = response.data[`${userID}`];\r\n        //         //console.log(DataGame.dataGame);\r\n\r\n        //     }).catch((e) => {\r\n        //         console.log('Error at get game data: ', e);\r\n        //     })\r\n\r\n        //     let gameClientParams = parameters.addComponent(StoreAPI);\r\n        //     gameClientParams.gameClient = this.gameClient;\r\n        //     gameClientParams.userData = this.user;\r\n        //     director.addPersistRootNode(parameters);\r\n\r\n        //     //Run callback\r\n        //     callBack.apply(callBack);\r\n        // }).catch((e) => {\r\n        //     console.log('Error at init game client: ', e);\r\n        // })\r\n    }\r\n\r\n    public startMatch(callBack: () => void): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n\r\n        this.gameClient.match.startMatch().then((data) => {\r\n            gameClientParams.matchData = data;\r\n\r\n            //Create array log\r\n            if (!DataGame.dataGame.checkLog) DataGame.dataGame.checkLog = {};\r\n            DataGame.dataGame.checkLog[data.matchId] = [];\r\n\r\n\r\n            // Apply callback\r\n            callBack.apply(callBack);\r\n        }).catch((error) => console.log('Error at start match: ', error));\r\n    }\r\n\r\n    /** \r\n     * @param callBack Call when api done\r\n     * @param data Data leader board\r\n     */\r\n    public completeMatch(callBack: () => void, data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n\r\n        this.gameClient.match.completeMatch(gameClientParams.matchData, data)\r\n            .then(() => {\r\n                let userID = this.gameClient.user.citizen.getCitizenId();\r\n                this.gameClient.user.data.setGameData({ [userID]: DataGame.dataGame }, false).then(() => { })\r\n                    .catch((e) => { console.log(\"Error at set game data\", e); })\r\n\r\n                //Apply callback\r\n                callBack.apply(callBack);\r\n            }).catch((e) => {\r\n                console.log(e);\r\n            })\r\n    }\r\n\r\n    public setGameData(logGame: { score: number, seconds: number, datetime: string }): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n\r\n        this.gameClient = gameClientParams.gameClient;\r\n        let matchId = gameClientParams.matchData.matchId\r\n\r\n        DataGame.dataGame.checkLog[`${matchId}`].push(logGame);\r\n    }\r\n\r\n    public logMatch(data: Object): void {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.gameClient.logMatch(gameClientParams.matchData.matchId, data).catch((e) => console.log(e));\r\n    }\r\n\r\n    public async getLeaderBoard(type: number): Promise<LeaderBoard[]> {\r\n        let parameters = find(Constants.NODE_NAME.GameClient);\r\n        let gameClientParams = parameters.getComponent(StoreAPI);\r\n        this.gameClient = gameClientParams.gameClient;\r\n        this.user = gameClientParams.userData;\r\n\r\n        let data: LeaderBoard[] = await this.gameClient.leaderBoard.getList(type).catch((e) => {\r\n            return [];\r\n        });\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n"]}