{"version":3,"sources":["file:///Users/ADMIN/Desktop/fruit-lines-saga/assets/Script/GameManager/GameController.ts"],"names":["_decorator","Animation","Button","Component","director","Label","Node","ProgressBar","randomRangeInt","tween","Vec3","AudioType","MatrixManager","GameView","NodeModal","Cell","CellType","ItemType","Constants","ScoreManager","AudioController","GameCenterController","LevelBar","LeaderboardHandle","ccclass","property","GameController","type","tooltip","listBoardCell","Array","listFruitCell","listNextTypes","listNextCells","listCoorOfItem","currentFruitCell","boardItem","isGameOver","isPause","currentItem","None","turn","cell","coor","listNewCell","listNextCell","prev","path","numberItem","Map","numberAction","interval","time","intervalProcess","countdown","coefficient","combo","prevGift","start","lbCountDown","node","parent","active","coefficientNode","levelBar","setCurrentLabel","setValueBar","gameCenter","startMatch","setInterval","clearInterval","logMatch","score","scoreManager","getScore","gameView","hiddenLoad","initGame","showCountdown","string","setTimeout","progressTime","progress","set","Boom","DEFAULT_NUMBER_ITEM","Hammer","Undo","spawnCellFruit","spawnNextCells","nodeModal","boardBackground","children","boardFruit","map","on","EventType","TOUCH_START","onTouchStartBoard","onTouchStartCell","addEventButtons","buttonResume","CLICK","settingBoard","buttonSetting","buttonHome","button","loadScene","SCENE_NAME","Begin","listButtonRestart","Game","itemBoom","onTouchStartBoom","itemHammer","onTouchStartHammer","itemUndo","handleUndo","TOUCH_END","onTouchEndItem","buttonBoomSide","buttonHammerSide","buttonUndoSide","boardView","TOUCH_MOVE","onTouchMoveBoardView","onTouchEndBoardView","TOUCH_CANCEL","event","target","currentCellComponent","getComponent","newCoor","getCoordinates","oldCoor","matrixManager","getPath","getTypeFruit","stopAnimation","length","moveFruit","fillCell","row","BOARD_SIZE","col","emptyCell","index","fillIndex","playAnimation","audioController","playAudio","Click","Tick","generateCells","arrayIndex","undefined","isRestore","Slide","arrayTw","i","temp","newPos","CELL_SIZE","tw","to","position","easing","push","call","moveComplete","setCoordinates","currentType","nextCell","getNextCellByCoor","removeCells","removeNodeFromList","deleteCells","cellComponent","setCellType","Fruit","generateListNextCells","checkGameOver","get","getListFruitCell","number","setLabelItem","restoreNewCell","restoreNextCell","restoreCurrentCell","reverse","listCell","component","Hint","off","currentCoor","onTouchStartItem","itemBoard","itemHammerBoard","board","location","getLocationTouch","getIndexByLocation","gridBoom","setPosition","x","y","gridHammer","listCoor","numberFruit","listCells","getListDeleteCell","play","playExplosion","item","getCellType","Math","floor","find","array","findIndex","splice","getListDelete","listDeleteCell","count","Award","hiddenCell","playAnimationScore","addScore","setToValue","randomGift","logGame","seconds","datetime","Date","toDateString","setGameData","filter","random","console","log","playAniamtionGift","listDeleteCells","isElementOfArray","Lose","isCompleted","showLoad","completeMatch","lbHandle","show","showResult"],"mappings":"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","sourcesContent":["import { AudioType, Turn } from './../Utils/DataTypes';\r\nimport { _decorator, Animation, Button, Component, director, EventTouch, Label, Node, ProgressBar, randomRangeInt, Tween, tween, Vec3 } from 'cc';\r\nimport { MatrixManager } from './MatrixManager';\r\nimport { GameView } from './GameView';\r\nimport { NodeModal } from '../NodeModal';\r\nimport { Cell } from '../PrefabControl/Cell';\r\nimport { CellType, Coordinates, FruitType, ItemType } from '../Utils/DataTypes';\r\nimport { Constants } from '../Utils/Constants';\r\nimport { ScoreManager } from '../ScoreManager';\r\nimport { AudioController } from '../AudioController';\r\nimport { GameCenterController } from '../GameCenter/GameCenterController';\r\nimport { LevelBar } from '../PrefabControl/LevelBar';\r\nimport { LeaderboardHandle } from '../../Leaderboard/Script/LeaderboardHandle';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('GameController')\r\nexport class GameController extends Component {\r\n    @property({\r\n        type: MatrixManager,\r\n        tooltip: 'Matrix manager'\r\n    })\r\n    private matrixManager: MatrixManager;\r\n\r\n    @property({\r\n        type: GameView,\r\n        tooltip: 'Game view node'\r\n    })\r\n    private gameView: GameView;\r\n\r\n    @property({\r\n        type: NodeModal,\r\n        tooltip: 'Node modal'\r\n    })\r\n    private nodeModal: NodeModal;\r\n\r\n    @property({\r\n        type: ScoreManager,\r\n        tooltip: 'Score manager'\r\n    })\r\n    private scoreManager: ScoreManager;\r\n\r\n    @property({\r\n        type: AudioController\r\n    })\r\n    private audioController: AudioController;\r\n\r\n    @property({\r\n        type: GameCenterController,\r\n        tooltip: 'Game center controller'\r\n    })\r\n    private gameCenter: GameCenterController;\r\n\r\n    @property(LevelBar)\r\n    private levelBar: LevelBar;\r\n\r\n    @property(ProgressBar)\r\n    private progressTime: ProgressBar;\r\n\r\n    @property(Label)\r\n    private lbCountDown: Label;\r\n\r\n    @property(Node)\r\n    private coefficientNode: Node;\r\n\r\n    @property(LeaderboardHandle)\r\n    private lbHandle: LeaderboardHandle;\r\n\r\n    private listBoardCell: Array<Node> = new Array();\r\n    private listFruitCell: Array<Node> = new Array();\r\n    private listNextTypes: Array<number> = new Array();\r\n    private listNextCells: Array<Node> = new Array();\r\n    private listCoorOfItem: Array<Coordinates> = new Array();\r\n\r\n    private currentFruitCell: Node | null = null;\r\n    private boardItem: Node;\r\n\r\n    private isGameOver: boolean = false;\r\n    private isPause: boolean = false;\r\n    private currentItem: ItemType = ItemType.None;\r\n    private turn: Turn = { cell: null, coor: null, listNewCell: [], listNextCell: [], prev: null, path: [] }\r\n\r\n    private numberItem: Map<ItemType, number> = new Map();\r\n    private numberAction: number = 0;\r\n\r\n    private interval: number;\r\n    private time: number = 0;\r\n    private intervalProcess: number;\r\n    private countdown: number = 1500;\r\n\r\n    private coefficient: number = 1;\r\n    private combo: number = 1;\r\n    private prevGift: number = -1;\r\n\r\n    protected start(): void {\r\n\r\n        this.lbCountDown.node.parent.active = false;\r\n        this.coefficientNode.active = false;\r\n        this.levelBar.setCurrentLabel(1);\r\n        this.levelBar.setValueBar(0);\r\n        this.gameCenter.startMatch(() => {\r\n            this.interval = setInterval(() => {\r\n                if (!this.gameCenter) clearInterval(this.interval);\r\n                this.time++\r\n                this.gameCenter && this.gameCenter.logMatch({ score: this.scoreManager.getScore() });\r\n            }, 1000);\r\n            this.gameView.hiddenLoad();\r\n            this.initGame();\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private showCountdown(): void {\r\n        this.lbCountDown.node.parent.active = true;\r\n        this.lbCountDown.string = `15`;\r\n        this.coefficient = 2;\r\n        this.coefficientNode.active = true;\r\n        setTimeout(() => {\r\n            this.intervalProcess = setInterval(() => {\r\n                this.progressTime.progress -= 0.0006;\r\n                if (this.progressTime.progress <= 0) {\r\n                    clearInterval(this.intervalProcess);\r\n                    this.coefficient = 1;\r\n                    this.lbCountDown.node.parent.active = false;\r\n                    this.coefficientNode.active = false;\r\n                    this.progressTime.progress = 1;\r\n                    this.countdown = 1500;\r\n                }\r\n                this.countdown--;\r\n                if (this.countdown < 0) {\r\n                    return;\r\n                }\r\n                if (this.countdown % 100 === 0) this.lbCountDown.string = `${this.countdown / 100}`;\r\n            }, 10)\r\n        }, 1110);\r\n    }\r\n\r\n    private initGame(): void {\r\n        //Set info turn\r\n        this.turn.prev = { ...this.turn };\r\n        this.numberItem.set(ItemType.Boom, Constants.DEFAULT_NUMBER_ITEM);\r\n        this.numberItem.set(ItemType.Hammer, Constants.DEFAULT_NUMBER_ITEM);\r\n        this.numberItem.set(ItemType.Undo, Constants.DEFAULT_NUMBER_ITEM);\r\n\r\n        //Init fruit cell\r\n        this.spawnCellFruit();\r\n        this.spawnCellFruit();\r\n        this.spawnCellFruit();\r\n        this.spawnCellFruit();\r\n\r\n        //Spawn next cells\r\n        this.listNextTypes = this.gameView.spawnNextCells();\r\n\r\n        //Get list cell\r\n        this.listBoardCell = this.nodeModal.boardBackground.children;\r\n        this.listFruitCell = this.nodeModal.boardFruit.children;\r\n\r\n        //Add events\r\n        this.listBoardCell.map((cell) => cell.on(Node.EventType.TOUCH_START, this.onTouchStartBoard, this));\r\n        this.listFruitCell.map((cell) => cell.on(Node.EventType.TOUCH_START, this.onTouchStartCell, this))\r\n\r\n        this.addEventButtons();\r\n    }\r\n\r\n    private addEventButtons(): void {\r\n        this.nodeModal.buttonResume.node.on(Button.EventType.CLICK, () => {\r\n            this.isPause = false;\r\n            this.nodeModal.settingBoard.active = false;\r\n        });\r\n\r\n        this.nodeModal.buttonSetting.node.on(Button.EventType.CLICK, () => {\r\n            this.isPause = true;\r\n            this.nodeModal.settingBoard.active = true;\r\n        });\r\n\r\n        this.nodeModal.buttonHome.map((button) => {\r\n            button.node.on(Button.EventType.CLICK, () => director.loadScene(Constants.SCENE_NAME.Begin));\r\n        })\r\n\r\n        this.nodeModal.listButtonRestart.map((button) => {\r\n            button.node.on(Button.EventType.CLICK, () => {\r\n                director.loadScene(Constants.SCENE_NAME.Game)\r\n            });\r\n        })\r\n\r\n        //Event item\r\n        this.nodeModal.itemBoom.on(Node.EventType.TOUCH_START, this.onTouchStartBoom, this);\r\n        this.nodeModal.itemHammer.on(Node.EventType.TOUCH_START, this.onTouchStartHammer, this);\r\n        this.nodeModal.itemUndo.on(Node.EventType.TOUCH_START, this.handleUndo, this);\r\n\r\n        //Event item\r\n        this.nodeModal.itemBoom.on(Node.EventType.TOUCH_END, this.onTouchEndItem, this);\r\n        this.nodeModal.itemHammer.on(Node.EventType.TOUCH_END, this.onTouchEndItem, this);\r\n\r\n        //Event item\r\n        this.nodeModal.buttonBoomSide.on(Node.EventType.TOUCH_START, this.onTouchStartBoom, this);\r\n        this.nodeModal.buttonHammerSide.on(Node.EventType.TOUCH_START, this.onTouchStartHammer, this);\r\n        this.nodeModal.buttonUndoSide.on(Node.EventType.TOUCH_START, this.handleUndo, this);\r\n\r\n        //Event item\r\n        this.nodeModal.itemBoom.on(Node.EventType.TOUCH_END, this.onTouchEndItem, this);\r\n        this.nodeModal.itemHammer.on(Node.EventType.TOUCH_END, this.onTouchEndItem, this);\r\n\r\n\r\n        this.nodeModal.boardView.on(Node.EventType.TOUCH_MOVE, this.onTouchMoveBoardView, this);\r\n        this.nodeModal.boardView.on(Node.EventType.TOUCH_END, this.onTouchEndBoardView, this);\r\n        this.nodeModal.boardView.on(Node.EventType.TOUCH_CANCEL, this.onTouchEndBoardView, this);\r\n    }\r\n\r\n    /**\r\n    * Handle on touch start empty cell\r\n    * @param event \r\n    * @returns \r\n    */\r\n    private onTouchStartBoard(event: EventTouch): void {\r\n        if (!this.currentFruitCell || this.isGameOver || this.isPause) return;\r\n        let cell = event.target;\r\n        let currentCellComponent = this.currentFruitCell.getComponent(Cell);\r\n\r\n        let newCoor = cell.getComponent(Cell).getCoordinates();\r\n        let oldCoor = currentCellComponent.getCoordinates();\r\n\r\n        let path = this.matrixManager.getPath(newCoor, oldCoor);\r\n        let type = currentCellComponent.getTypeFruit();\r\n        currentCellComponent.stopAnimation();\r\n        if (path.length <= 1) {\r\n            this.currentFruitCell = null;\r\n            return;\r\n        }\r\n\r\n        //Move cell\r\n        this.moveFruit(path, false);\r\n        this.turn.path = path;\r\n        this.numberAction++;\r\n\r\n        this.matrixManager.fillCell(newCoor.row * Constants.BOARD_SIZE + newCoor.col, type);\r\n        this.matrixManager.emptyCell(oldCoor.row * Constants.BOARD_SIZE + oldCoor.col);\r\n\r\n        //remove index\r\n        let index = newCoor.row * Constants.BOARD_SIZE + newCoor.col;\r\n        this.matrixManager.fillIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Handle on start fruit\r\n     * @param event \r\n     * @returns \r\n     */\r\n    private onTouchStartCell(event: EventTouch): void {\r\n        if (this.isGameOver || this.isPause) return;\r\n        let cell: Node = event.target;\r\n\r\n        cell.getComponent(Cell).playAnimation();\r\n        if (cell !== this.currentFruitCell) {\r\n            this.currentFruitCell?.getComponent(Cell).stopAnimation();\r\n            this.currentFruitCell = cell;\r\n            this.audioController.playAudio(AudioType.Click);\r\n        } else {\r\n            this.audioController.playAudio(AudioType.Tick);\r\n            this.currentFruitCell = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param type Type of fruit\r\n     * @returns Node is spawned\r\n     */\r\n    private spawnCellFruit(type?: FruitType): Node {\r\n        let cell = this.gameView.generateCells(this.matrixManager.arrayIndex, type);\r\n        let coor = cell.getComponent(Cell).getCoordinates();\r\n        let index = coor.row * Constants.BOARD_SIZE + coor.col;\r\n        this.matrixManager.fillIndex(index);\r\n\r\n        if (type === undefined) {\r\n            let type = cell.getComponent(Cell).getTypeFruit();\r\n            this.matrixManager.fillCell(index, type);\r\n            cell.on(Node.EventType.TOUCH_START, this.onTouchStartCell, this);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * Move current fruit \r\n     * @param path Path of fruit\r\n     * @param isRestore Check action is restore\r\n     */\r\n    private moveFruit(path: Array<Coordinates>, isRestore: boolean): void {\r\n        if (!this.currentFruitCell || this.isGameOver || this.isPause) return;\r\n        this.audioController.playAudio(AudioType.Slide);\r\n        let arrayTw: Array<Tween<Node>> = new Array();\r\n        let i = 0;\r\n        let time = path.length < 3 ? 0.07 : 0.03;\r\n\r\n        //Create list tween\r\n        while (i < path.length) {\r\n            let temp: Coordinates = path[i];\r\n            let newPos: Vec3 = new Vec3(temp.col * Constants.CELL_SIZE, (8 - temp.row) * Constants.CELL_SIZE);\r\n            let tw = tween(this.currentFruitCell).to(time, { position: newPos }, { easing: 'smooth' });\r\n            arrayTw.push(tw);\r\n            i++;\r\n        }\r\n\r\n        //Set the next tween\r\n        for (let i = 0; i < arrayTw.length - 1; i++) arrayTw[i].call(() => arrayTw[i + 1].start());\r\n\r\n        //Play tween move\r\n        arrayTw[arrayTw.length - 1].call(() => {\r\n            this.moveComplete(path, isRestore);\r\n        });\r\n        arrayTw[0].start();\r\n        this.isPause = true;\r\n    }\r\n\r\n    /**\r\n    * Handle move cell complete\r\n    * @param path Path of cell move\r\n    */\r\n    private moveComplete(path: Array<Coordinates>, isRestore: boolean): void {\r\n        if (!this.currentFruitCell || this.isGameOver) return;\r\n        this.currentFruitCell.getComponent(Cell).setCoordinates(path[path.length - 1]);\r\n        this.isPause = false;\r\n\r\n        if (!isRestore) {\r\n            this.turn.listNewCell = [];\r\n            this.turn.listNextCell = [];\r\n\r\n            this.turn.cell = this.currentFruitCell;\r\n            this.turn.coor = this.currentFruitCell.getComponent(Cell).getCoordinates();\r\n            this.turn.prev = { ...this.turn };\r\n\r\n            let currentType = this.currentFruitCell.getComponent(Cell).getTypeFruit();\r\n            this.currentFruitCell = null;\r\n\r\n            //Remove next cell if it is in path\r\n            let nextCell = this.getNextCellByCoor(path[path.length - 1]);\r\n            if (nextCell) {\r\n                this.gameView.removeCells(nextCell);\r\n                this.removeNodeFromList(this.listNextCells, nextCell);\r\n            }\r\n\r\n            if (!this.deleteCells(path[path.length - 1], currentType)) {\r\n                this.listNextCells.map((cell) => {\r\n                    let cellComponent = cell.getComponent(Cell);\r\n                    //Set type fruit\r\n                    cellComponent.setCellType(CellType.Fruit);\r\n\r\n                    //Fill in data\r\n                    let coor = cellComponent.getCoordinates();\r\n                    let index = coor.row * Constants.BOARD_SIZE + coor.col;\r\n                    let type = cell.getComponent(Cell).getTypeFruit();\r\n                    this.matrixManager.fillCell(index, type);\r\n\r\n                    cell.on(Node.EventType.TOUCH_START, this.onTouchStartCell, this);\r\n                    this.turn.listNewCell.push(cell);\r\n                    this.deleteCells(coor, type);\r\n                });\r\n\r\n                this.generateListNextCells();\r\n            }\r\n            this.checkGameOver();\r\n        } else {\r\n            this.currentFruitCell = null;\r\n        }\r\n    }\r\n\r\n    //Handle action undo\r\n    private handleUndo(): void {\r\n        if (this.isPause || this.numberItem.get(ItemType.Undo) <= 0 || this.numberAction < 2) return;\r\n\r\n        this.listFruitCell = this.getListFruitCell();\r\n        if (this.listFruitCell.length <= 3) return;\r\n\r\n        this.currentFruitCell?.getComponent(Cell).stopAnimation();\r\n        let number = this.numberItem.get(ItemType.Undo);\r\n        this.numberItem.set(ItemType.Undo, number - 1);\r\n        this.gameView.setLabelItem(number - 1, ItemType.Undo);\r\n\r\n        this.turn = { ...this.turn.prev };\r\n        this.listNextCells = this.turn.listNewCell;\r\n        this.restoreNewCell([...this.turn.listNewCell]);\r\n        this.restoreNextCell([...this.turn.listNextCell]);\r\n        this.restoreCurrentCell(this.turn.cell, this.turn.path.reverse());\r\n    }\r\n\r\n    private restoreNewCell(listCell: Node[]): void {\r\n        listCell.map((cell) => {\r\n            let component = cell.getComponent(Cell);\r\n            component.setCellType(CellType.Hint);\r\n\r\n            //Fill in data\r\n            let coor = component.getCoordinates();\r\n            this.matrixManager.emptyCell(coor.row * Constants.BOARD_SIZE + coor.col);\r\n            this.matrixManager.fillIndex(coor.row * Constants.BOARD_SIZE + coor.col);\r\n            cell.off(Node.EventType.TOUCH_START);\r\n        })\r\n    }\r\n\r\n    private restoreNextCell(listCell: Node[]): void {\r\n        listCell.map((cell) => {\r\n            let component = cell.getComponent(Cell);\r\n            component.setCellType(CellType.Hint);\r\n\r\n            //Fill in data\r\n            let coor = component.getCoordinates();\r\n            let index = coor.row * Constants.BOARD_SIZE + coor.col;\r\n            this.matrixManager.emptyCell(index);\r\n            this.gameView.removeCells(cell);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Move current fruit to old coor\r\n     * @param cell Current fruit\r\n     * @param path \r\n     */\r\n    private restoreCurrentCell(cell: Node, path: Coordinates[] = []): void {\r\n        let currentCoor = cell.getComponent(Cell).getCoordinates();\r\n        let oldCoor = path[path.length - 1];\r\n        let type = cell.getComponent(Cell).getTypeFruit();\r\n        this.matrixManager.fillCell(oldCoor.row * Constants.BOARD_SIZE + oldCoor.col, type);\r\n        this.matrixManager.fillIndex(oldCoor.row * Constants.BOARD_SIZE + oldCoor.col);\r\n\r\n        this.matrixManager.emptyCell(currentCoor.row * Constants.BOARD_SIZE + currentCoor.col);\r\n\r\n        this.currentFruitCell = cell;\r\n        this.moveFruit(path, true);\r\n    }\r\n\r\n    //Handle on select item\r\n    private onTouchStartBoom(event: EventTouch): void {\r\n        this.onTouchStartItem(event, ItemType.Boom, this.nodeModal.itemBoard);\r\n    }\r\n\r\n    private onTouchStartHammer(event: EventTouch): void {\r\n        this.onTouchStartItem(event, ItemType.Hammer, this.nodeModal.itemHammerBoard);\r\n    }\r\n\r\n    private onTouchStartItem(event: EventTouch, type: ItemType, board: Node) {\r\n        if (this.numberItem.get(type) <= 0 || this.isPause) return;\r\n        let location = this.gameView.getLocationTouch(event, this.nodeModal.boardView);\r\n        let coor = this.getIndexByLocation(location);\r\n        this.boardItem = board;\r\n        switch (type) {\r\n            case ItemType.Boom:\r\n                this.nodeModal.gridBoom.active = false;\r\n                this.boardItem.setPosition(location.x - 150, location.y - 50);\r\n                break;\r\n\r\n            case ItemType.Hammer:\r\n                this.boardItem.setPosition(location.x, location.y);\r\n                this.nodeModal.gridHammer.active = false;\r\n                break;\r\n        }\r\n        //this.nodeModal.itemBoard.setPosition(location);\r\n        this.boardItem.active = true;\r\n        this.currentItem = type;\r\n    }\r\n\r\n    private onTouchEndItem(): void {\r\n        if (!this.boardItem || this.isPause) return;\r\n        this.boardItem.active = false;\r\n    }\r\n\r\n    private onTouchMoveBoardView(event: EventTouch): void {\r\n        if (!this.boardItem || this.isPause) return;\r\n        let location = this.gameView.getLocationTouch(event, this.nodeModal.boardView);\r\n        let coor = this.getIndexByLocation(location);\r\n\r\n        //Get list location\r\n        let listCoor: Array<Coordinates> = new Array();\r\n        let temp: Coordinates = { row: 8 - coor.row, col: coor.col };\r\n        this.boardItem.active = true;\r\n\r\n        switch (this.currentItem) {\r\n            case ItemType.None:\r\n                this.boardItem.active = false;\r\n                return;\r\n            case ItemType.Boom:\r\n                if (coor.row > Constants.BOARD_SIZE || coor.row < 0 ||\r\n                    coor.col < 0 || coor.col >= Constants.BOARD_SIZE) {\r\n                    this.nodeModal.gridBoom.active = false;\r\n                    this.boardItem.setPosition(location.x - 150, location.y - 50);\r\n                    break;\r\n                } else {\r\n                    if (coor.row <= 0) coor.row = 0;\r\n                    if (coor.col <= 0) coor.col = 1;\r\n                    if (coor.row >= Constants.BOARD_SIZE - 3) coor.row = Constants.BOARD_SIZE - 3;\r\n                    if (coor.col >= Constants.BOARD_SIZE - 2) coor.col = Constants.BOARD_SIZE - 2;\r\n\r\n                    this.nodeModal.gridBoom.active = true;\r\n\r\n                    temp = { row: 8 - coor.row, col: coor.col };\r\n                    while (listCoor.length < 9) {\r\n                        listCoor.push(temp);\r\n                        listCoor.push({ ...temp, col: temp.col + 1 });\r\n                        listCoor.push({ ...temp, col: temp.col - 1 });\r\n                        temp = { row: temp.row - 1, col: temp.col };\r\n                    }\r\n                    this.boardItem.setPosition(coor.col * Constants.CELL_SIZE - 40, coor.row * Constants.CELL_SIZE);\r\n                    break;\r\n                }\r\n            case ItemType.Hammer:\r\n                if (coor.row > Constants.BOARD_SIZE || coor.row < 0 ||\r\n                    coor.col < 0 || coor.col >= Constants.BOARD_SIZE) {\r\n                    this.boardItem.setPosition(location.x, location.y);\r\n                    this.nodeModal.gridHammer.active = false;\r\n                    break;\r\n                } else {\r\n                    if (coor.row <= 0) coor.row = 0;\r\n                    if (coor.col <= 0) coor.col = 0;\r\n                    if (coor.row >= Constants.BOARD_SIZE - 1) coor.row = Constants.BOARD_SIZE - 1;\r\n                    if (coor.col >= Constants.BOARD_SIZE - 1) coor.col = Constants.BOARD_SIZE - 1;\r\n\r\n                    this.nodeModal.gridHammer.active = true;\r\n\r\n                    temp = { row: 8 - coor.row, col: coor.col };\r\n                    listCoor.push(temp);\r\n                    this.boardItem.setPosition(coor.col * Constants.CELL_SIZE, coor.row * Constants.CELL_SIZE);\r\n                    break;\r\n                }\r\n        }\r\n        //Get list delete\r\n        this.listCoorOfItem = [...listCoor];\r\n    }\r\n\r\n    private onTouchEndBoardView(): void {\r\n        if (this.currentItem === ItemType.None) return;\r\n        if (this.listCoorOfItem.length === 0) {\r\n            this.boardItem.active = false;\r\n            this.currentItem = ItemType.None;\r\n            return;\r\n        }\r\n        let numberFruit = this.getListFruitCell().length;\r\n        let listCells = this.getListDeleteCell(this.listCoorOfItem);\r\n\r\n        if (this.currentItem === ItemType.Hammer) this.audioController.playAudio(AudioType.Hammer)\r\n        else this.audioController.playAudio(AudioType.Boom);\r\n\r\n        //If board empty\r\n        if (listCells.length >= numberFruit) {\r\n            this.currentItem = ItemType.None;\r\n            this.boardItem && (this.boardItem.active = false);\r\n            this.boardItem = null;\r\n            return;\r\n        }\r\n\r\n        this.boardItem.getComponent(Animation).play();\r\n        if (this.currentItem === ItemType.Boom) this.gameView.playExplosion(this.boardItem.parent, this.boardItem.position);\r\n        this.isPause = true;\r\n        setTimeout(() => {\r\n            for (let item of listCells) {\r\n                if (item.getComponent(Cell).getCellType() === CellType.Hint) continue;\r\n                let coor = item.getComponent(Cell).getCoordinates();\r\n                this.matrixManager.emptyCell(coor.row * Constants.BOARD_SIZE + coor.col)\r\n                this.gameView.removeCells(item);\r\n            }\r\n\r\n            let number = this.numberItem.get(this.currentItem) - 1;\r\n            this.listCoorOfItem = [];\r\n\r\n            this.numberItem.set(this.currentItem, number);\r\n            this.gameView.setLabelItem(number, this.currentItem);\r\n\r\n            this.currentItem = ItemType.None;\r\n            this.boardItem.active = false;\r\n            this.boardItem = null;\r\n            this.isPause = false;\r\n        }, 500);\r\n    }\r\n\r\n    private getIndexByLocation(location: Vec3): Coordinates {\r\n        let row = Math.floor(location.y / Constants.CELL_SIZE);\r\n        let col = Math.floor(location.x / Constants.CELL_SIZE);\r\n\r\n        return { row: row, col: col }\r\n    }\r\n\r\n    private getNextCellByCoor(coor: Coordinates): Node {\r\n        let cell = this.listNextCells.find((item) =>\r\n            item.getComponent(Cell).getCoordinates().row === coor.row &&\r\n            item.getComponent(Cell).getCoordinates().col === coor.col)\r\n        return cell;\r\n    }\r\n\r\n    private removeNodeFromList(array: Array<Node>, node: Node): void {\r\n        let index = array.findIndex((item) => item === node);\r\n        array.splice(index, 1);\r\n    }\r\n\r\n    private generateListNextCells(): void {\r\n        //Generate list next cells\r\n        this.listNextCells = [];\r\n        this.listNextTypes.map((type) => {\r\n            let cell = this.spawnCellFruit(type);\r\n            this.listNextCells.push(cell);\r\n            this.turn.listNextCell.push(cell)\r\n        });\r\n\r\n        this.listNextTypes = this.gameView.spawnNextCells();\r\n    }\r\n\r\n    private deleteCells(coor: Coordinates, type: number): boolean {\r\n        let listCoor = this.matrixManager.getListDelete(coor, type);\r\n        let listDeleteCell = this.getListDeleteCell(listCoor);\r\n        if (this.matrixManager.count >= 2) this.combo += this.matrixManager.count - 1;\r\n        this.matrixManager.count = 0;\r\n\r\n        if (listCoor.length > 0) {\r\n            this.isPause = true;\r\n            listCoor.map((item) => this.matrixManager.emptyCell(item.row * Constants.BOARD_SIZE + item.col));\r\n            this.audioController.playAudio(AudioType.Award);\r\n\r\n            listDeleteCell.map((item) => {\r\n                item.getComponent(Cell).hiddenCell();\r\n                setTimeout(() => {\r\n                    this.gameView.removeCells(item);\r\n                    this.isPause = false;\r\n                }, 1000);\r\n            });\r\n            let score = listCoor.length * this.coefficient * this.combo;\r\n            if (this.combo >= 2) {\r\n                this.gameView.playAnimationScore(`combo ${this.combo}`, `+${score}`)\r\n            }\r\n            this.scoreManager.addScore(score);\r\n            this.combo++;\r\n\r\n            this.levelBar.setToValue(score, () => {\r\n                this.randomGift();\r\n            });\r\n            let logGame = {\r\n                seconds: this.time,\r\n                score: this.scoreManager.getScore(),\r\n                datetime: new Date().toDateString()\r\n            }\r\n\r\n            this.gameCenter.setGameData(logGame);\r\n            return true;\r\n        } else {\r\n            this.combo = 1;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private randomGift(): void {\r\n        let array: number[] = [];\r\n\r\n        for (let i = 0; i < 55; i++) array.push(3);\r\n        for (let i = 0; i < 40; i++) array.push(2);\r\n        for (let i = 0; i < 5; i++) array.push(0);\r\n\r\n        array = array.filter((item) => item !== this.prevGift);\r\n\r\n        let random = randomRangeInt(0, array.length);\r\n        random = array[random];\r\n        console.log(random);\r\n\r\n\r\n        this.gameView.playAniamtionGift(random);\r\n        if (random < 3) {\r\n            let number = this.numberItem.get(random);\r\n            this.numberItem.set(random, number + 1);\r\n            this.gameView.setLabelItem(number + 1, random);\r\n        } else {\r\n            this.coefficientNode.active = true;\r\n            this.showCountdown();\r\n        };\r\n    }\r\n\r\n    private getListFruitCell(): Array<Node> {\r\n        let listCell = this.nodeModal.boardFruit.children;\r\n        listCell = listCell.filter((item) =>\r\n            item.getComponent(Cell) && item.getComponent(Cell).getCellType() === CellType.Fruit);\r\n\r\n        return listCell;\r\n    }\r\n\r\n    private getListDeleteCell(listCoor: Array<Coordinates>): Array<Node> {\r\n        let listDeleteCells: Array<Node> = new Array();\r\n\r\n        this.listFruitCell = this.nodeModal.boardFruit.children;\r\n        this.listFruitCell.map((cell) => {\r\n            let cellComponent = cell.getComponent(Cell);\r\n            if (this.matrixManager.isElementOfArray(cellComponent.getCoordinates(), listCoor))\r\n                listDeleteCells.push(cell);\r\n        })\r\n        return listDeleteCells;\r\n    }\r\n\r\n    private checkGameOver(): void {\r\n        if (this.matrixManager.arrayIndex.length <= 0) {\r\n            this.audioController.playAudio(AudioType.Lose);\r\n            this.isGameOver = true;\r\n            let count = 0;\r\n            let isCompleted: boolean = false;\r\n\r\n            let interval = setInterval(() => {\r\n                count++;\r\n                if (count > 2 && !isCompleted) {\r\n                    this.gameView.showLoad();\r\n                    clearInterval(interval);\r\n                }\r\n            }, 1000)\r\n\r\n            clearInterval(this.interval)\r\n            this.gameCenter.logMatch({ score: this.scoreManager.getScore() });\r\n            this.gameCenter.completeMatch(() => {\r\n                this.lbHandle.show();\r\n                isCompleted = true;\r\n                this.gameView.showResult();\r\n            }, { score: this.scoreManager.getScore() });\r\n        }\r\n    }\r\n}"]}